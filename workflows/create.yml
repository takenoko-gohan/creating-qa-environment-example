name: Creating qa environment

on:
  pull_request:
    types: [opened]
    branches:
      - main

env:
  ENV: pr${{ github.event.pull_request.number }}
  TFSTATE_BUCKET: ${{ secrets.TFSTATE_BUCKET }}
  IMAGE_TAG: ${{ github.sha }}

jobs:
  CreateEnv:
    runs-on: ubuntu-20.04
    timeout-minutes: 10

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-1

    - name: Import source credentials
      run: aws codebuild import-source-credentials --token ${{ secrets.PERSONAL_ACCESS_TOKEN }} --server-type GITHUB --auth-type PERSONAL_ACCESS_TOKEN

    - name: Run CodeBuild
      uses: aws-actions/aws-codebuild-run-build@v1
      with:
        project-name: qa-apply
        env-vars-for-codebuild: |
          ENV,
          TFSTATE_BUCKET

  BuildWeb:
    runs-on: ubuntu-20.04
    timeout-minutes: 10
    needs: CreateEnv

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build and push container image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      working-directory: ./web
      run: |
        docker build -t $ECR_REGISTRY/qa-$ENV-web:$IMAGE_TAG .
        docker push $ECR_REGISTRY/qa-$ENV-web:$IMAGE_TAG
  
  BuildWorker:
    runs-on: ubuntu-20.04
    timeout-minutes: 10
    needs: CreateEnv

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build and push container image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      working-directory: ./worker
      run: |
        docker build -t $ECR_REGISTRY/qa-$ENV-worker:$IMAGE_TAG .
        docker push $ECR_REGISTRY/qa-$ENV-worker:$IMAGE_TAG
  
  BuildMigrate:
    runs-on: ubuntu-20.04
    timeout-minutes: 10
    needs: CreateEnv

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build and push container image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      working-directory: ./migrate
      run: |
        docker build -t $ECR_REGISTRY/qa-$ENV-migrate:$IMAGE_TAG .
        docker push $ECR_REGISTRY/qa-$ENV-migrate:$IMAGE_TAG
 
  DbMigrate:
    runs-on: ubuntu-20.04
    timeout-minutes: 10
    needs: [BuildWeb, BuildWorker, BuildMigrate]

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-1

    - name: Setup ecspresso
      uses: kayac/ecspresso@v1
      with:
        version: v1.6.2

    - name: Run DB Migration
      working-directory: ./ecspresso/migrate
      run: ecspresso run --config config.yaml

  DeployApp:
    runs-on: ubuntu-20.04
    timeout-minutes: 10
    needs: DbMigrate

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-1

    - name: Setup ecspresso
      uses: kayac/ecspresso@v1
      with:
        version: v1.6.2

    - name: Deploy ECS service
      working-directory: ./ecspresso/app
      run: ecspresso deploy --config config.yaml --no-wait

  NotifySucceed:
    if: ${{ success() }}
    runs-on: ubuntu-20.04
    timeout-minutes: 3
    needs: DeployApp

    steps:
    - name: Create comments
      env:
        DOMAIN: ${{ secrets.DOMAIN }}
      run: |
        echo "検証環境を作成しました。" >> comments
        echo "https://$ENV.$DOMAIN" >> comments
        sed -i -z 's/\n/\\n/g' comments

    - name: Post comments
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        URL: ${{ github.event.pull_request.comments_url }}
      run: |
        curl -X POST \
          -H "Authorization: token ${GITHUB_TOKEN}" \
          -d "{\"body\": \"$(cat comments)\"}" \
          ${URL}

  NotifyFailure:
    if: ${{ failure() }}
    runs-on: ubuntu-20.04
    timeout-minutes: 3
    needs: DeployApp

    steps:
    - name: Create comments
      run: |
        echo "検証環境の作成に失敗しました。" >> comments
        echo "#${{ github.run_number }}" >> comments
        sed -i -z 's/\n/\\n/g' comments

    - name: Post comments
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        URL: ${{ github.event.pull_request.comments_url }}
      run: |
        curl -X POST \
          -H "Authorization: token ${GITHUB_TOKEN}" \
          -d "{\"body\": \"$(cat comments)\"}" \
          ${URL}
